version: 2.1

parameters:
  trigger:
    type: boolean
    default: true

  functions-lead:
    type: boolean
    default: false

executors:
  node:
    docker:
      - image: circleci/node:8.10

jobs:
  trigger-workflows:
    # docker:
    #   - image: circleci/node:8.10
    executor: node
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-ci
      - run:
          name: Install dependencies
          command: npm i node-fetch await-exec js-yaml
      - save_cache:
          key: dependency-cache-ci
          paths:
            - ./node_modules
      - run:
          name: Determine which projects have changed and trigger the builds
          # command: chmod +x .circleci/circle_trigger.sh && .circleci/circle_trigger.sh
          command: node .circleci/circle_trigger.js
  serverless-build-test-deploy:
    parameters:
      package_dir:
        type: string
    working_directory: << parameters.package_dir >>
    docker:
      - image: nikolaik/python-nodejs
    steps:
      - checkout:
          path: ~/clicker
      - restore_cache:
          key: dependency-cache-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          name: Install dependencies
          command: npm i
      - save_cache:
          key: dependency-cache-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Run tests
          command: npm test
      - run:
          name: Deploy serverless function
          branches:
            only:
              - master
              - release
              - develop
          command: |
            npm run build --if-present
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              npx serverless deploy --stage prod --verbose
            fi
            if [ "${CIRCLE_BRANCH}" == "release" ]; then
              npx serverless deploy --stage release --verbose
            fi
            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              npx serverless deploy --stage develop --verbose
            fi

workflows:
  version: 2
  ci:
    when: << pipeline.parameters.trigger >>
    jobs:
      - trigger-workflows:
        filters:
          branches:
            only:
              - master
              - release
              - develop
  functions-lead:
    when: << pipeline.parameters.functions-lead >>
    jobs:
      - serverless-build-test-deploy:
          package_dir: ~/clicker/functions/lead
  functions-admin:
    when: << pipeline.parameters.functions-admin >>
    jobs:
      - serverless-build-test-deploy:
          package_dir: ~/clicker/functions/admin
  functions-analytics:
    when: << pipeline.parameters.functions-analytics >>
    jobs:
      - serverless-build-test-deploy:
          package_dir: ~/clicker/functions/analytics
  functions-app:
    when: << pipeline.parameters.functions-app >>
    jobs:
      - serverless-build-test-deploy:
          package_dir: ~/clicker/functions/app
  functions-game:
    when: << pipeline.parameters.functions-game >>
    jobs:
      - serverless-build-test-deploy:
          package_dir: ~/clicker/functions/game
  functions-job:
    when: << pipeline.parameters.functions-job >>
    jobs:
      - serverless-build-test-deploy:
          package_dir: ~/clicker/functions/job
  functions-location:
    when: << pipeline.parameters.functions-location >>
    jobs:
      - serverless-build-test-deploy:
          package_dir: ~/clicker/functions/location
  functions-notification:
    when: << pipeline.parameters.functions-notification >>
    jobs:
      - serverless-build-test-deploy:
          package_dir: ~/clicker/functions/notification
  functions-program:
    when: << pipeline.parameters.functions-program >>
    jobs:
      - serverless-build-test-deploy:
          package_dir: ~/clicker/functions/program
  functions-receiver:
    when: << pipeline.parameters.functions-receiver >>
    jobs:
      - serverless-build-test-deploy:
          package_dir: ~/clicker/functions/receiver
  functions-remote:
    when: << pipeline.parameters.functions-remote >>
    jobs:
      - serverless-build-test-deploy:
          package_dir: ~/clicker/functions/remote
  functions-reservation:
    when: << pipeline.parameters.functions-reservation >>
    jobs:
      - serverless-build-test-deploy:
          package_dir: ~/clicker/functions/reservation
  functions-user:
    when: << pipeline.parameters.functions-user >>
    jobs:
      - serverless-build-test-deploy:
          package_dir: ~/clicker/functions/user
  functions-widget:
    when: << pipeline.parameters.functions-widget >>
    jobs:
      - serverless-build-test-deploy:
          package_dir: ~/clicker/functions/widget
  # web/app:
  #   working_directory: ~/clicker/web/app
  #   docker:
  #     - image: circleci/node:8.10
  #   steps:
  #     - run:
  #         name: Trigger Netlify build + deploy
  #         branches:
  #           only:
  #             - master
  #             - release
  #             - develop
  #         command: |
  #           echo -e "deploy clicker web"
  #           if [ "${CIRCLE_BRANCH}" == "master" ]; then
  #             curl -X POST -d {} https://api.netlify.com/build_hooks/5c7458709c6a819dd611ee82
  #           fi
  #           if [ "${CIRCLE_BRANCH}" == "release" ]; then
  #             curl -X POST -d {} https://api.netlify.com/build_hooks/5c74588dce2aff6b7eb9d135
  #           fi
  #           if [ "${CIRCLE_BRANCH}" == "develop" ]; then
  #             curl -X POST -d {} https://api.netlify.com/build_hooks/5c745884ad8fd5e199de18cf
  #           fi
  # mobile/app:
  #   working_directory: ~/clicker/mobile/app
  #   docker:
  #     - image: circleci/node:8.10
  #   steps:
  #     - run:
  #         name: Trigger Netlify build + deploy
  #         branches:
  #           only:
  #             - master
  #             - release
  #             - develop
  #         command: |
  #           echo -e "deploy clicker mobile"
  #           if [ "${CIRCLE_BRANCH}" == "master" ]; then
  #             curl -X POST -d {} https://api.netlify.com/build_hooks/5c745a22aad21db652db51e1
  #           fi
  #           if [ "${CIRCLE_BRANCH}" == "release" ]; then
  #             curl -X POST -d {} https://api.netlify.com/build_hooks/5c745a2933754a346bf8ef90
  #           fi
  #           if [ "${CIRCLE_BRANCH}" == "develop" ]; then
  #             curl -X POST -d {} https://api.netlify.com/build_hooks/5c745a2f1056ec16dab4338b
  #           fi
  # packages/antenna:
  #   working_directory: ~/clicker/packages/antenna
  #   docker:
  #     - image: chybie/node-aws-cli
  #   steps:
  #     - checkout:
  #         path: ~/clicker
  #     - run:
  #         name: Install dependencies
  #         command: npm i
  #     - run:
  #         name: Upload app zip to s3
  #         branches:
  #           only:
  #             - master
  #             - release
  #             - develop
  #         command: |
  #           echo -e "upload antenna package to s3"
  #           filename=
  #           if [ "${CIRCLE_BRANCH}" == "master" ]; then
  #             filename="antenna.tar.gz"
  #           fi
  #           if [ "${CIRCLE_BRANCH}" == "release" ]; then
  #             filename="antenna-release.tar.gz"
  #           fi
  #           if [ "${CIRCLE_BRANCH}" == "develop" ]; then
  #             filename="antenna-develop.tar.gz"
  #           fi
  #           tar zcvf $filename *
  #           aws s3 cp $filename s3://clicker-antenna/app/
  # e2e/app:
  #   working_directory: ~/clicker/e2e/app
  #   docker:
  #     - image: cypress/base:10
  #   steps:
  #     - checkout:
  #         path: ~/clicker
  #     # - restore_cache:
  #     #     key: dependency-cache-{{ checksum "package.json" }}
  #     # - restore_cache:
  #     #     key: cypress
  #     - restore_cache:
  #         keys:
  #           - v1-deps-{{ .Branch }}-{{ checksum "package.json" }}
  #           # - v1-deps-{{ .Branch }}
  #           # - v1-deps
  #     - run:
  #         name: Install dependencies
  #         command: npm ci
  #     - save_cache:
  #         key: v1-deps-{{ .Branch }}-{{ checksum "package.json" }}
  #         # cache NPM modules and the folder with the Cypress binary
  #         paths:
  #           - ~/.cache
  #           - ./node_modules
  #     # - save_cache:
  #     #     key: dependency-cache-{{ checksum "package.json" }}
  #     #     paths:
  #     #       - ./node_modules
  #     # - save_cache:
  #     #     key: cypress
  #     #     paths:
  #     #       - /root/.cache/Cypress/3.4.1/Cypress
  #     - run:
  #         name: Run e2e tests
  #         no_output_timeout: 3m
  #         branches:
  #           only:
  #             - master
  #             - release
  #             - develop
  #         command: |
  #           npm run test:ci
