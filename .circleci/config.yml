aliases:
  - &serverless_build_test_deploy
    docker:
      # - image: circleci/node:8.10
      # - image: circleci/python:3.8.1
      - image: danvk/yarn-python36:0.0.1
    steps:
      - checkout:
          path: ~/clicker
      - restore_cache:
          key: dependency-cache-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          name: Install dependencies
          command: npm i
      - save_cache:
          key: dependency-cache-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Run tests
          command: npm test
      - run:
          name: Deploy serverless function
          branches:
            only:
              - master
              - release
              - develop
          command: |
            npm run build --if-present
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              npx serverless deploy --stage prod --verbose
            fi
            if [ "${CIRCLE_BRANCH}" == "release" ]; then
              npx serverless deploy --stage release --verbose
            fi
            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              npx serverless deploy --stage develop --verbose
            fi
version: 2.0
jobs:
  build:
    docker:
      - image: circleci/node:8.10
    branches:
      only:
        - master
        - release
        - develop
    steps:
      - checkout
      - run:
          name: Determine which projects have changed and trigger the builds
          command: |
            # Identify modified directories
            LAST_SUCCESSFUL_BUILD_URL="https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH?filter=completed&limit=1"
            LAST_SUCCESSFUL_COMMIT=`curl -Ss -u "$CIRCLE_TOKEN:" $LAST_SUCCESSFUL_BUILD_URL | jq -r '.[0]["vcs_revision"]'`
            #first commit in a branch
            if [[ ${LAST_SUCCESSFUL_COMMIT} == "null" ]]; then
              COMMITS="origin/master"
            else
              COMMITS="${CIRCLE_SHA1}..${LAST_SUCCESSFUL_COMMIT}"
            fi
            git diff --name-only $COMMITS | cut -d/ -f-2 | sort -u > projects
            echo -e "Modified directories:\n`cat projects`\n"
            # If modified directories contain Gopkg/vendor directores, build all projects and exit
            buildall=0
            for project in `cat projects`; do
              if [[ ${project} =~ "Gopkg" || ${project} =~ "vendor" ]]; then
                buildall=1
                echo -e "Dependencies change detected. building all $CIRCLE_PROJECT_REPONAME"
                curl -s -u ${CIRCLE_TOKEN}: \
                    -d build_parameters[CIRCLE_JOB]=all \
                    https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
              fi
              if [[ ${buildall} -eq 1 ]]; then
                exit 0
              fi
            done
            # Build affected projects and their dependencies
            projects_inc_dep=(`cat projects`)
            echo -e "Calculating dependencies\n"
            for dir in `ls -d */`; do
              for dep in `go list -f '{{ .Deps }}' ./${dir} 2>/dev/null`; do
                for project_dep in `echo $dep | grep github.com/tufin/$CIRCLE_PROJECT_REPONAME | egrep -v "vendor|${dir%\/}"`; do
                  if [[ " ${projects_inc_dep[@]} " =~ " ${project_dep##*\/} " ]] && ! [[ " ${projects_inc_dep[@]} " =~ " ${dir%\/} " ]]; then
                    projects_inc_dep+=(${dir%\/})
                  fi
                done
              done
            done
            echo -e "Building: ${projects_inc_dep[@]}\n"
            for project in ${projects_inc_dep[@]}; do
              if grep -Fxq $project .projects; then
                printf "\nTriggerring build for project: "$project, ${CIRCLE_TOKEN}, ${project}, https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
                curl -s -u ${CIRCLE_TOKEN}: \
                  -d build_parameters[CIRCLE_JOB]=${project} \
                  https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
              fi
            done
  functions/admin:
    working_directory: ~/clicker/functions/admin
    <<: *serverless_build_test_deploy
  functions/analytics:
    working_directory: ~/clicker/functions/analytics
    <<: *serverless_build_test_deploy
  functions/app:
    working_directory: ~/clicker/functions/app
    <<: *serverless_build_test_deploy
  functions/game:
    working_directory: ~/clicker/functions/game
    <<: *serverless_build_test_deploy
  functions/job:
    working_directory: ~/clicker/functions/job
    <<: *serverless_build_test_deploy
  functions/lead:
    working_directory: ~/clicker/functions/lead
    <<: *serverless_build_test_deploy
  functions/location:
    working_directory: ~/clicker/functions/location
    <<: *serverless_build_test_deploy
  functions/notification:
    working_directory: ~/clicker/functions/notification
    <<: *serverless_build_test_deploy
  functions/program:
    working_directory: ~/clicker/functions/program
    <<: *serverless_build_test_deploy
  functions/receiver:
    working_directory: ~/clicker/functions/receiver
    <<: *serverless_build_test_deploy
  functions/remote:
    working_directory: ~/clicker/functions/remote
    <<: *serverless_build_test_deploy
  functions/reservation:
    working_directory: ~/clicker/functions/reservation
    <<: *serverless_build_test_deploy
  functions/user:
    working_directory: ~/clicker/functions/user
    <<: *serverless_build_test_deploy
  functions/widget:
    working_directory: ~/clicker/functions/widget
    <<: *serverless_build_test_deploy
  web/app:
    working_directory: ~/clicker/web/app
    docker:
      - image: circleci/node:8.10
    steps:
      - run:
          name: Trigger Netlify build + deploy
          branches:
            only:
              - master
              - release
              - develop
          command: |
            echo -e "deploy clicker web"
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              curl -X POST -d {} https://api.netlify.com/build_hooks/5c7458709c6a819dd611ee82
            fi
            if [ "${CIRCLE_BRANCH}" == "release" ]; then
              curl -X POST -d {} https://api.netlify.com/build_hooks/5c74588dce2aff6b7eb9d135
            fi
            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              curl -X POST -d {} https://api.netlify.com/build_hooks/5c745884ad8fd5e199de18cf
            fi
  mobile/app:
    working_directory: ~/clicker/mobile/app
    docker:
      - image: circleci/node:8.10
    steps:
      - run:
          name: Trigger Netlify build + deploy
          branches:
            only:
              - master
              - release
              - develop
          command: |
            echo -e "deploy clicker mobile"
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              curl -X POST -d {} https://api.netlify.com/build_hooks/5c745a22aad21db652db51e1
            fi
            if [ "${CIRCLE_BRANCH}" == "release" ]; then
              curl -X POST -d {} https://api.netlify.com/build_hooks/5c745a2933754a346bf8ef90
            fi
            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              curl -X POST -d {} https://api.netlify.com/build_hooks/5c745a2f1056ec16dab4338b
            fi
  packages/antenna:
    working_directory: ~/clicker/packages/antenna
    docker:
      - image: chybie/node-aws-cli
    steps:
      - checkout:
          path: ~/clicker
      - run:
          name: Install dependencies
          command: npm i
      - run:
          name: Upload app zip to s3
          branches:
            only:
              - master
              - release
              - develop
          command: |
            echo -e "upload antenna package to s3"
            filename=
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              filename="antenna.tar.gz"
            fi
            if [ "${CIRCLE_BRANCH}" == "release" ]; then
              filename="antenna-release.tar.gz"
            fi
            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              filename="antenna-develop.tar.gz"
            fi
            tar zcvf $filename *
            aws s3 cp $filename s3://clicker-antenna/app/
  e2e/app:
    working_directory: ~/clicker/e2e/app
    docker:
      - image: cypress/base:10
    steps:
      - checkout:
          path: ~/clicker
      # - restore_cache:
      #     key: dependency-cache-{{ checksum "package.json" }}
      # - restore_cache:
      #     key: cypress
      - restore_cache:
          keys:
            - v1-deps-{{ .Branch }}-{{ checksum "package.json" }}
            # - v1-deps-{{ .Branch }}
            # - v1-deps
      - run:
          name: Install dependencies
          command: npm ci
      - save_cache:
          key: v1-deps-{{ .Branch }}-{{ checksum "package.json" }}
          # cache NPM modules and the folder with the Cypress binary
          paths:
            - ~/.cache
            - ./node_modules
      # - save_cache:
      #     key: dependency-cache-{{ checksum "package.json" }}
      #     paths:
      #       - ./node_modules
      # - save_cache:
      #     key: cypress
      #     paths:
      #       - /root/.cache/Cypress/3.4.1/Cypress
      - run:
          name: Run e2e tests
          no_output_timeout: 3m
          branches:
            only:
              - master
              - release
              - develop
          command: |
            npm run test:ci
