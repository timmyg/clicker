aliases:
  - &serverless_build_test_deploy
    docker:
      # - image: circleci/node:8.10
      # - image: circleci/python:3.8.1
      - image: nikolaik/python-nodejs
    steps:
      - checkout:
          path: ~/clicker
      - restore_cache:
          key: dependency-cache-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          name: Install dependencies
          command: npm i
      - save_cache:
          key: dependency-cache-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Run tests
          command: npm test
      - run:
          name: Deploy serverless function
          branches:
            only:
              - master
              - release
              - develop
          command: |
            npm run build --if-present
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              npx serverless deploy --stage prod --verbose
            fi
            if [ "${CIRCLE_BRANCH}" == "release" ]; then
              npx serverless deploy --stage release --verbose
            fi
            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              npx serverless deploy --stage develop --verbose
            fi
version: 2.0
jobs:
  build:
    docker:
      - image: circleci/node:8.10
    branches:
      only:
        - master
        - release
        - develop
    steps:
      - checkout
      - run:
          name: Determine which projects have changed and trigger the builds
          command: |
            #!/bin/bash
            set -e

            # The root directory of packages.
            # Use `.` if your packages are located in root.
            ROOT="./packages" 
            REPOSITORY_TYPE="github"
            CIRCLE_API="https://circleci.com/api"

            ############################################
            ## 1. Commit SHA of last CI build
            ############################################
            LAST_COMPLETED_BUILD_URL="${CIRCLE_API}/v1.1/project/${REPOSITORY_TYPE}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/tree/${CIRCLE_BRANCH}?filter=completed&limit=100&shallow=true"
            LAST_COMPLETED_BUILD_SHA=`curl -Ss -u "${CIRCLE_TOKEN}:" "${LAST_COMPLETED_BUILD_URL}" | jq -r 'map(select(.status == "success") | select(.workflows.workflow_name != "ci")) | .[0]["vcs_revision"]'`

            if  [[ ${LAST_COMPLETED_BUILD_SHA} == "null" ]]; then
              echo -e "\e[93mThere are no completed CI builds in branch ${CIRCLE_BRANCH}.\e[0m"

              # Adapted from https://gist.github.com/joechrysler/6073741
              TREE=$(git show-branch -a \
                | grep '\*' \
                | grep -v `git rev-parse --abbrev-ref HEAD` \
                | sed 's/.*\[\(.*\)\].*/\1/' \
                | sed 's/[\^~].*//' \
                | uniq)

              REMOTE_BRANCHES=$(git branch -r | sed 's/\s*origin\///' | tr '\n' ' ')
              PARENT_BRANCH=master
              for BRANCH in ${TREE[@]}
              do
                BRANCH=${BRANCH#"origin/"}
                if [[ " ${REMOTE_BRANCHES[@]} " == *" ${BRANCH} "* ]]; then
                    echo "Found the parent branch: ${CIRCLE_BRANCH}..${BRANCH}"
                    PARENT_BRANCH=$BRANCH
                    break
                fi
              done

              echo "Searching for CI builds in branch '${PARENT_BRANCH}' ..."

              LAST_COMPLETED_BUILD_URL="${CIRCLE_API}/v1.1/project/${REPOSITORY_TYPE}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/tree/${PARENT_BRANCH}?filter=completed&limit=100&shallow=true"
              LAST_COMPLETED_BUILD_SHA=`curl -Ss -u "${CIRCLE_TOKEN}:" "${LAST_COMPLETED_BUILD_URL}" \
                | jq -r "map(\
                  select(.status == \"success\") | select(.workflows.workflow_name != \"ci\") | select(.build_num < ${CIRCLE_BUILD_NUM})) \
                | .[0][\"vcs_revision\"]"`
            fi

            if [[ ${LAST_COMPLETED_BUILD_SHA} == "null" ]]; then
              echo -e "\e[93mNo CI builds for branch ${PARENT_BRANCH}. Using master.\e[0m"
              LAST_COMPLETED_BUILD_SHA=master
            fi

            ############################################
            ## 2. Changed packages
            ############################################
            PACKAGES=$(ls ${ROOT} -l | grep ^d | awk '{print $9}')
            echo "Searching for changes since commit [${LAST_COMPLETED_BUILD_SHA:0:7}] ..."

            ## The CircleCI API parameters object
            PARAMETERS='"trigger":false'
            COUNT=0
            for PACKAGE in ${PACKAGES[@]}
            do
              PACKAGE_PATH=${ROOT#.}/$PACKAGE
              LATEST_COMMIT_SINCE_LAST_BUILD=$(git log -1 $CIRCLE_SHA1 ^$LAST_COMPLETED_BUILD_SHA --format=format:%H --full-diff ${PACKAGE_PATH#/})

              if [[ -z "$LATEST_COMMIT_SINCE_LAST_BUILD" ]]; then
                echo -e "\e[90m  [-] $PACKAGE \e[0m"
              else
                PARAMETERS+=", \"$PACKAGE\":true"
                COUNT=$((COUNT + 1))
                echo -e "\e[36m  [+] ${PACKAGE} \e[21m (changed in [${LATEST_COMMIT_SINCE_LAST_BUILD:0:7}])\e[0m"
              fi
            done

            if [[ $COUNT -eq 0 ]]; then
              echo -e "\e[93mNo changes detected in packages. Skip triggering workflows.\e[0m"
              exit 0
            fi

            echo "Changes detected in ${COUNT} package(s)."

            ############################################
            ## 3. CicleCI REST API call
            ############################################
            DATA="{ \"branch\": \"$CIRCLE_BRANCH\", \"parameters\": { $PARAMETERS } }"
            echo "Triggering pipeline with data:"
            echo -e "  $DATA"

            URL="${CIRCLE_API}/v2/project/${REPOSITORY_TYPE}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pipeline"
            HTTP_RESPONSE=$(curl -s -u ${CIRCLE_TOKEN}: -o response.txt -w "%{http_code}" -X POST --header "Content-Type: application/json" -d "$DATA" $URL)

            if [ "$HTTP_RESPONSE" -ge "200" ] && [ "$HTTP_RESPONSE" -lt "300" ]; then
                echo "API call succeeded."
                echo "Response:"
                cat response.txt
            else
                echo -e "\e[93mReceived status code: ${HTTP_RESPONSE}\e[0m"
                echo "Response:"
                cat response.txt
                exit 1
            fi
  functions/admin:
    working_directory: ~/clicker/functions/admin
    <<: *serverless_build_test_deploy
  functions/analytics:
    working_directory: ~/clicker/functions/analytics
    <<: *serverless_build_test_deploy
  functions/app:
    working_directory: ~/clicker/functions/app
    <<: *serverless_build_test_deploy
  functions/game:
    working_directory: ~/clicker/functions/game
    <<: *serverless_build_test_deploy
  functions/job:
    working_directory: ~/clicker/functions/job
    <<: *serverless_build_test_deploy
  functions/lead:
    working_directory: ~/clicker/functions/lead
    <<: *serverless_build_test_deploy
  functions/location:
    working_directory: ~/clicker/functions/location
    <<: *serverless_build_test_deploy
  functions/notification:
    working_directory: ~/clicker/functions/notification
    <<: *serverless_build_test_deploy
  functions/program:
    working_directory: ~/clicker/functions/program
    <<: *serverless_build_test_deploy
  functions/receiver:
    working_directory: ~/clicker/functions/receiver
    <<: *serverless_build_test_deploy
  functions/remote:
    working_directory: ~/clicker/functions/remote
    <<: *serverless_build_test_deploy
  functions/reservation:
    working_directory: ~/clicker/functions/reservation
    <<: *serverless_build_test_deploy
  functions/user:
    working_directory: ~/clicker/functions/user
    <<: *serverless_build_test_deploy
  functions/widget:
    working_directory: ~/clicker/functions/widget
    <<: *serverless_build_test_deploy
  web/app:
    working_directory: ~/clicker/web/app
    docker:
      - image: circleci/node:8.10
    steps:
      - run:
          name: Trigger Netlify build + deploy
          branches:
            only:
              - master
              - release
              - develop
          command: |
            echo -e "deploy clicker web"
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              curl -X POST -d {} https://api.netlify.com/build_hooks/5c7458709c6a819dd611ee82
            fi
            if [ "${CIRCLE_BRANCH}" == "release" ]; then
              curl -X POST -d {} https://api.netlify.com/build_hooks/5c74588dce2aff6b7eb9d135
            fi
            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              curl -X POST -d {} https://api.netlify.com/build_hooks/5c745884ad8fd5e199de18cf
            fi
  mobile/app:
    working_directory: ~/clicker/mobile/app
    docker:
      - image: circleci/node:8.10
    steps:
      - run:
          name: Trigger Netlify build + deploy
          branches:
            only:
              - master
              - release
              - develop
          command: |
            echo -e "deploy clicker mobile"
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              curl -X POST -d {} https://api.netlify.com/build_hooks/5c745a22aad21db652db51e1
            fi
            if [ "${CIRCLE_BRANCH}" == "release" ]; then
              curl -X POST -d {} https://api.netlify.com/build_hooks/5c745a2933754a346bf8ef90
            fi
            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              curl -X POST -d {} https://api.netlify.com/build_hooks/5c745a2f1056ec16dab4338b
            fi
  packages/antenna:
    working_directory: ~/clicker/packages/antenna
    docker:
      - image: chybie/node-aws-cli
    steps:
      - checkout:
          path: ~/clicker
      - run:
          name: Install dependencies
          command: npm i
      - run:
          name: Upload app zip to s3
          branches:
            only:
              - master
              - release
              - develop
          command: |
            echo -e "upload antenna package to s3"
            filename=
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              filename="antenna.tar.gz"
            fi
            if [ "${CIRCLE_BRANCH}" == "release" ]; then
              filename="antenna-release.tar.gz"
            fi
            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              filename="antenna-develop.tar.gz"
            fi
            tar zcvf $filename *
            aws s3 cp $filename s3://clicker-antenna/app/
  e2e/app:
    working_directory: ~/clicker/e2e/app
    docker:
      - image: cypress/base:10
    steps:
      - checkout:
          path: ~/clicker
      # - restore_cache:
      #     key: dependency-cache-{{ checksum "package.json" }}
      # - restore_cache:
      #     key: cypress
      - restore_cache:
          keys:
            - v1-deps-{{ .Branch }}-{{ checksum "package.json" }}
            # - v1-deps-{{ .Branch }}
            # - v1-deps
      - run:
          name: Install dependencies
          command: npm ci
      - save_cache:
          key: v1-deps-{{ .Branch }}-{{ checksum "package.json" }}
          # cache NPM modules and the folder with the Cypress binary
          paths:
            - ~/.cache
            - ./node_modules
      # - save_cache:
      #     key: dependency-cache-{{ checksum "package.json" }}
      #     paths:
      #       - ./node_modules
      # - save_cache:
      #     key: cypress
      #     paths:
      #       - /root/.cache/Cypress/3.4.1/Cypress
      - run:
          name: Run e2e tests
          no_output_timeout: 3m
          branches:
            only:
              - master
              - release
              - develop
          command: |
            npm run test:ci
