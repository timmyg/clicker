service: game
frameworkVersion: '>=1.1.0 <2.0.0'
provider:
  name: aws
  memorySize: 128
  versionFunctions: false
  runtime: nodejs10.x
  tracing: true
  deploymentBucket:
    name: serverless-deploys-clicker
  environment:
    stage: ${self:custom.stage}
    serviceName: ${self:service}
    tableGame: ${self:custom.tableGame}
    airtableKey: ${env:AIRTABLE_KEY}
    airtableBase: ${self:custom.airtableBase.${self:custom.stage}}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:*
        - lambda:InvokeFunction
        - lambda:InvokeAsync
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: '*'
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
        {
          'Fn::Join':
            ['', ['arn:aws:sns:${self:provider.region}:', { 'Ref': 'AWS::AccountId' }, ':${self:custom.newGameTopic}']],
        }
plugins:
  - serverless-domain-manager
  - serverless-prune-plugin
  - serverless-sentry
  - serverless-dotenv-plugin
  - serverless-plugin-tracing

custom:
  stage: ${opt:stage, self:provider.stage}
  tableGame: games-${self:custom.stage}
  prune:
    automatic: true
    number: 3
  tableThroughputs:
    prod: 2
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  domains:
    prod: api.tryclicker.com
    release: api-release.tryclicker.com
    develop: api-develop.tryclicker.com
  airtableBase:
    prod: ${env:AIRTABLE_BASE}
    release: ${env:AIRTABLE_BASE_RELEASE}
    develop: ${env:AIRTABLE_BASE_DEV}
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: games
    certificateName: 'api.tryclicker.com'
    stage: ${self:custom.stage}
    createRoute53Record: true
    endpointType: 'edge'
  sentry:
    dsn: ${env:SENTRY_DSN_ENDPOINT}
  dotenv:
    basePath: ../
  newGameTopic: '${self:service}-${self:custom.stage}-new-game-topic'
  newGameTopicArn:
    deployed:
      {
        'Fn::Join':
          ['', ['arn:aws:sns:${self:provider.region}:', { 'Ref': 'AWS::AccountId' }, ':${self:custom.newGameTopic}']],
      }
resources:
  Resources:
    GamesTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.tableGame}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
          - AttributeName: status
            AttributeType: S
          - AttributeName: start
            AttributeType: S
        KeySchema:
          - AttributeName: start
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: statusGlobalIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: idGlobalIndex
            KeySchema:
              - AttributeName: id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          # - IndexName: idOnlyGlobalIndex
          #   KeySchema:
          #     - AttributeName: id
          #       KeyType: HASH
          #   Projection:
          #     ProjectionType: KEYS_ONLY
    newGameTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:custom.stage}-new-game-topic
    newGameQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:custom.stage}-new-game-queue
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt
            - newGameDLQ
            - Arn
          maxReceiveCount: 3
    newGameDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:custom.stage}-new-game-queue-dlq
    snsToNewGameQueueSqsPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: 'allow-sns-messages'
              Effect: Allow
              Principal: '*'
              Resource: !GetAtt
                - newGameQueue
                - Arn
              Action: 'SQS:SendMessage'
              Condition:
                ArnEquals:
                  'aws:SourceArn': !Ref newGameTopic
        Queues:
          - Ref: newGameQueue
    newGameQueueSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: !Ref newGameTopic
        Endpoint: !GetAtt
          - newGameQueue
          - Arn
        Protocol: sqs
        RawMessageDelivery: 'true'
functions:
  health:
    handler: game.health
    events:
      - http:
          path: health
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
  getStatus:
    handler: game.getStatus
    events:
      - http:
          path: 'score'
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  syncSchedule:
    handler: game.syncSchedule
    memorySize: 1024
    timeout: 30
    environment:
      newGameTopicArn: ${self:custom.newGameTopicArn.deployed}
    events:
      - schedule: cron(00 9 * * ? *) # every day @ 5:00am eastern
      - http:
          path: 'sync'
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  getByStartTimeAndNetwork:
    handler: game.getByStartTimeAndNetwork
    events:
      - http:
          path: search
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  syncScores:
    handler: game.syncScores
    memorySize: 1024
    timeout: 12
    events:
      # - schedule: rate(5 minutes)
      - schedule: cron(0/1 21-8 ? * * *) # Every 1 minute between 9pm UTC and 8am UTC
      - schedule: cron(0/10 8-21 ? * * *) # Every 10 minutes between 8am UTC and 9pm UTC
      - http:
          path: sync/scores
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  scoreboard:
    handler: game.scoreboard
    memorySize: 1024
    events:
      - http:
          path: scoreboard
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  consumeNewGameAddToAirtable:
    handler: game.consumeNewGameAddToAirtable
    reservedConcurrency: 1
    events:
      - sqs:
          arn: !GetAtt
            - newGameQueue
            - Arn
          batchSize: 1
