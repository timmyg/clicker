service: game
frameworkVersion: '>=1.1.0 <2.0.0'
provider:
  name: aws
  memorySize: 1024
  versionFunctions: false
  runtime: nodejs10.x
  # tracing: true
  logRetentionInDays: 14
  deploymentBucket:
    name: serverless-deploys-clicker
  environment:
    stage: ${self:custom.stage}
    serviceName: ${self:service}
    tableGame: ${self:custom.tableGame}
    airtableKey: ${env:AIRTABLE_KEY}
    airtableBase: ${self:custom.airtableBase.${self:custom.stage}}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:*
        - lambda:InvokeFunction
        - lambda:InvokeAsync
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: '*'
plugins:
  - serverless-domain-manager
  - serverless-prune-plugin
  - serverless-sentry
  - serverless-dotenv-plugin
  - serverless-plugin-tracing

custom:
  stage: ${opt:stage, self:provider.stage}
  tableGame: games-${self:custom.stage}
  prune:
    automatic: true
    number: 3
  domains:
    prod: api.tryclicker.com
    release: api-release.tryclicker.com
    develop: api-develop.tryclicker.com
  airtableBase:
    prod: ${env:AIRTABLE_BASE}
    release: ${env:AIRTABLE_BASE_RELEASE}
    develop: ${env:AIRTABLE_BASE_DEV}
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: games
    certificateName: 'api.tryclicker.com'
    stage: ${self:custom.stage}
    createRoute53Record: true
    endpointType: 'edge'
  sentry:
    dsn: ${env:SENTRY_DSN_ENDPOINT}
  dotenv:
    basePath: ../
functions:
  health:
    handler: game.health
    events:
      - http:
          path: health
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
  # syncNextFewDays:
  #   handler: game.syncNextFewDays
  #   description: sync action network api to database for next few days
  #   timeout: 30
  #   # environment:
  #   #   newGameTopicArn: ${self:custom.newGameTopicArn.deployed}
  #   events:
  #     - schedule: cron(00 9 * * ? *) # every day @ 5:00am eastern
  #     - http:
  #         path: sync
  #         method: post
  syncActiveAirtable:
    handler: game.syncActiveAirtable
    description: sync active games into airtable
    timeout: 12
    events:
      - schedule: cron(4/10,9/10 * * * ? *)
      - http:
          path: sync/airtable/active
          method: post
  syncAirtable:
    handler: game.syncAirtable
    description: sync games from AN api to airtable Games table
    timeout: 30
    events:
      - schedule: cron(59 8 * * ? *) # every day @ 3:59/4:59am eastern
      - http:
          path: sync/airtable
          method: post
  get:
    handler: game.get
    description: get game by id
    events:
      - http:
          path: '{id}'
          method: get
  # scoreboard:
  #   handler: game.scoreboard
  #   description: get all games scores, used by webapp /scoreboard
  #   events:
  #     - http:
  #         path: scoreboard
  #         method: get
  # scoreboardLiveUpcoming:
  #   handler: game.scoreboardLiveUpcoming
  #   description: get 3 upcoming games scores
  #   timeout: 10
  #   events:
  #     - http:
  #         path: scoreboard/upcoming
  #         method: get
  # updateAirtableGamesStatus:
  #   handler: game.updateAirtableGamesStatus
  #   description: update active games in airtable from db
  #   timeout: 30
  #   events:
  #     # - schedule: cron(0/2 21-4 ? * * *) # Every 2 minutes between 11pm UTC and 4am UTC
  #     # - schedule: cron(0/10 4-21 ? * * *) # Every 10 minutes between 4am UTC and 9pm UTC
  #     # - schedule: cron(0/10 4-21 ? * * *) # Every 10 minutes between 4am UTC and 9pm UTC
  #     - schedule: cron(9/10 * * * ? *) # Every 9th minute
  #     - http:
  #         path: airtable/live/status
  #         method: put
