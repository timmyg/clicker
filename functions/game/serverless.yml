service: game
frameworkVersion: '>=1.1.0 <2.0.0'
provider:
  name: aws
  memorySize: 128
  versionFunctions: false
  runtime: nodejs10.x
  deploymentBucket:
    name: serverless-deploys-clicker
  environment:
    stage: ${self:custom.stage}
    serviceName: ${self:service}
    tableGame: ${self:custom.tableGame}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:*
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: '*'
plugins:
  - serverless-domain-manager
  - serverless-prune-plugin
  - serverless-sentry
  - serverless-dotenv-plugin

custom:
  stage: ${opt:stage, self:provider.stage}
  tableGame: games-${self:custom.stage}
  prune:
    automatic: true
    number: 3
  tableThroughputs:
    prod: 2
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  domains:
    prod: api.tryclicker.com
    release: api-release.tryclicker.com
    develop: api-develop.tryclicker.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: games
    certificateName: 'api.tryclicker.com'
    stage: ${self:custom.stage}
    createRoute53Record: true
    endpointType: 'edge'
  sentry:
    dsn: ${env:SENTRY_DSN_ENDPOINT}
  dotenv:
    basePath: ../
resources:
  Resources:
    GamesTable:
      Type: 'AWS::DynamoDB::Table'
      BillingMode: PAY_PER_REQUEST
      Properties:
        TableName: ${self:custom.tableGame}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
          - AttributeName: status
            AttributeType: S
          - AttributeName: start
            AttributeType: S
        KeySchema:
          - AttributeName: start
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: statusGlobalIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
            Projection:
              # NonKeyAttributes:
              #   - awayTeam
              #   - homeTeam
              #   - statusDisplay
              # ProjectionType: INCLUDE
              ProjectionType: ALL
        # - IndexName: networkGlobalIndex
        #   KeySchema:
        #     - AttributeName: network
        #       KeyType: HASH
        #   Projection:
        #     ProjectionType: KEYS_ONLY
        #   ProvisionedThroughput:
        #     ReadCapacityUnits: ${self:custom.tableThroughput}
        #     WriteCapacityUnits: ${self:custom.tableThroughput}
functions:
  health:
    handler: game.health
    events:
      - http:
          path: health
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
  getStatus:
    handler: game.getStatus
    events:
      - http:
          path: 'score'
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  syncSchedule:
    handler: game.syncSchedule
    memorySize: 1024
    timeout: 30
    events:
      - schedule: cron(00 9 * * ? *) # every day @ 5:00am eastern
      - http:
          path: 'sync'
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  # getByStartTimeAndNetwork:
  #   handler: game.getByStartTimeAndNetwork
  #   events:
  #     - http:
  #         path: search
  #         method: get
  #         cors:
  #           origin: '*'
  #           headers:
  #             - partner
  #             - authorization
  #             - content-type
  syncScores:
    handler: game.syncScores
    memorySize: 1024
    timeout: 12
    events:
      - schedule: rate(5 minutes)
      - http:
          path: sync/scores
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  scoreboard:
    handler: game.scoreboard
    events:
      - http:
          path: scoreboard
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
