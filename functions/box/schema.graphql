schema {
  query: Query
  mutation: Mutation
}

type Query {
  box(id: ID!, locationId: String!): Box
  boxes(locationId: String!): [Box]
  getHelloWorld: HelloWorld
}

type Mutation {
  addBox(id: ID!, locationId: String!, info: BoxInfoInput!, configuration: BoxConfigurationInput!): Box!
  updateBoxChannel(id: ID!, locationId: String!, live: BoxLiveInput!): Box!
}

type HelloWorld {
	# go: String
	nodeFunction: String
	# python: String
	# ruby: String
}

input BoxInfoInput {
  ip: String!
  clientAddress: String!
  locationName: String
  notes: String
}

input BoxConfigurationInput {
  appActive: Boolean
  automationActive: Boolean
}

input BoxLiveInput {
  channel: Int!
  channelMinor: Int
  channelChangeAt: Int
  channelChangeSource: String
}

type Program {
  gameId: Int
  channelTitle: String
}

type BoxLive {
  channel: Int!
  channelMinor: Int
  channelChangeAt: Int
  channelChangeSource: String
}

type BoxInfo {
  ip: String!
  clientAddress: String!
  locationName: String
  notes: String
}

type BoxConfiguration {
  appActive: Boolean!
  automationActive: Boolean!
}

type Box {
  id: ID!
  locationId: String!
  label: String
  zone: String
  configuration: BoxConfiguration!
  info: BoxInfo!
  live: BoxLive
  # program: Program
  program: String
  program2: String
  updatedAt: Int
}
