service: box
frameworkVersion: '>=1.1.0 <2.0.0'
provider:
  name: aws
  memorySize: 1024
  versionFunctions: false
  runtime: nodejs12.x
  # tracing: true
  logRetentionInDays: 14
  deploymentBucket:
    name: serverless-deploys-clicker
  environment:
    stage: ${self:custom.stage}
    region: ${opt:region, self:provider.region}
    tableBox: ${self:custom.tableBox}
    graphqlApiUrl: ${env:GRAPHQL_API_URL, self:custom.graphqlApiUrl}
    graphqlApiKey: ${env:GRAPHQL_API_KEY, self:custom.graphqlApiKey}
  iamRoleStatements: ${file(../serverless.common.yml):iamRoleStatements}
resources:
  Resources:
    BoxesTable: ${file(./table.boxes.yml)}
plugins:
  # ${file(../serverless.common.yml):plugins}
  - serverless-prune-plugin
  - serverless-deployment-bucket
  - serverless-domain-manager
  - serverless-sentry
  - serverless-dotenv-plugin
  - serverless-plugin-tracing
  - serverless-bundle
  - serverless-appsync-plugin
  # - serverless-pseudo-parameters
  - serverless-stack-output
custom:
  stage: ${opt:stage}
  tableBox: boxes-${self:custom.stage}
  graphqlApiUrl: { Fn::GetAtt: [GraphQlApi, GraphQLUrl] }
  graphqlApiKey: { Fn::GetAtt: [GraphQlApiKeyDefault, ApiKey] }
  bundle:
    #   tsConfig: 'tsconfig.json'
    sourcemaps: false # Enable source maps
  # webpack:
  #   # webpackConfig: ./webpack.config.js
  #   includeModules: true
  prune:
    automatic: true
    number: 3
  domains:
    prod: api.tryclicker.com
    release: api-release.tryclicker.com
    develop: api-develop.tryclicker.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: boxes
    certificateName: 'api.tryclicker.com'
    stage: ${self:custom.stage}
    createRoute53Record: true
    endpointType: 'edge'
  sentry:
    dsn: ${env:SENTRY_DSN_ENDPOINT}
  dotenv:
    basePath: ../
  appSync:
    # component: '@serverless/aws-app-sync'
    # inputs:
    # domain:
    name: ${self:service}-${self:custom.stage}
    authenticationType: API_KEY
    apiKeys:
      - myApiKey
    dataSources:
      - type: AMAZON_DYNAMODB
        name: Boxes
        config:
          tableName: ${self:custom.tableBox}
    mappingTemplates:
      - dataSource: Boxes
        type: Mutation
        field: addBox
        request: request-create.vtl
        response: response-create.vtl
      - dataSource: Boxes
        type: Query
        field: box
        request: request-get.vtl
        response: response-get.vtl
    schema: 'schema.graphql'
functions:
  health:
    handler: box.health
    events:
      - http:
          path: health
          method: get
  create:
    handler: box.create
    events:
      - http:
          path: ''
          method: post
  get:
    handler: box.get
    events:
      - http:
          path: ''
          method: get
