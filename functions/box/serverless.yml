service: box
frameworkVersion: '>=2.0.0 <3.0.0'
provider:
  name: aws
  memorySize: 1024
  versionFunctions: false
  runtime: nodejs12.x
  # tracing: true
  logRetentionInDays: 14
  deploymentBucket:
    name: serverless-deploys-clicker
  environment:
    stage: ${self:custom.stage}
    region: ${opt:region, self:provider.region}
    tableBox: ${self:custom.tableBox}
    graphqlApiUrl: ${env:GRAPHQL_API_URL, self:custom.graphqlApiUrl}
    graphqlApiKey: ${env:GRAPHQL_API_KEY, self:custom.graphqlApiKey}
  iamRoleStatements: ${file(../serverless.common.yml):iamRoleStatements}
resources:
  Resources:
    BoxesTable: ${file(./table.boxes.yml)}
plugins:
  - serverless-prune-plugin
  - serverless-deployment-bucket
  - serverless-domain-manager
  - serverless-sentry
  - serverless-dotenv-plugin
  - serverless-plugin-tracing
  - serverless-bundle
  - serverless-appsync-plugin
custom:
  stage: ${opt:stage}
  tableBox: boxes-${self:custom.stage}
  graphqlApiUrl: { Fn::GetAtt: [GraphQlApi, GraphQLUrl] }
  graphqlApiKey: { Fn::GetAtt: [GraphQlApiKeyDefault, ApiKey] }
  bundle:
    sourcemaps: false
  prune:
    automatic: true
    number: 3
  domains: ${file(../serverless.common.yml):domains}
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: boxes
    certificateName: 'api.tryclicker.com'
    stage: ${self:custom.stage}
    createRoute53Record: true
    endpointType: 'edge'
  sentry:
    dsn: ${env:SENTRY_DSN_ENDPOINT}
  dotenv:
    basePath: ../
  appSync:
    name: ${self:service}-${self:custom.stage}
    authenticationType: API_KEY
    apiKeys:
      - myApiKey
    dataSources:
      - type: AMAZON_DYNAMODB
        name: Boxes
        config:
          tableName: ${self:custom.tableBox}
      - type: AWS_LAMBDA
        name: myLambda
        description: 'attach current program'
        config:
          # lambdaFunctionArn: ${myLambda.arn}
          functionName: fetchBoxProgram #
          # lambdaFunctionArn: { Fn::GetAtt: [myLambda, Arn] } # Where GraphqlLambdaFunction is the lambda function cloudformation resource created by serverless for the serverless function named graphql
    mappingTemplates:
      - dataSource: Boxes
        type: Mutation
        field: addBox
        request: request-create.vtl
        response: response-create.vtl
      - dataSource: Boxes
        type: Mutation
        field: updateBoxChannel
        request: request-update-channel.vtl
        response: response-update-channel.vtl
      - dataSource: Boxes
        type: Query
        field: box
        request: request-get.vtl
        response: response-get.vtl
        # kind: PIPELINE
        # functions:
        #   - fetchProgramFunction
      - dataSource: Boxes
        type: Query
        field: boxes
        request: request-get-all.vtl
        response: response-get-all.vtl
      - dataSource: myLambda
        type: BoxLive
        field: program
        # name: fetchProgramFunction
        request: request-get-program.vtl # defaults to {name}.request.vtl
        response: response-get.vtl # defaults to {name}.response.vtl
        # type: Box
      #   field: program
      #   request: getFavourites-request-mapping-template.txt
      #   response: response-get-all.vtl
    schema: 'schema.graphql'
functions:
  fetchBoxProgram:
    handler: box.fetchBoxProgram
  health:
    handler: box.health
    events:
      - http:
          path: health
          method: get
  create:
    handler: box.create
    events:
      - http:
          path: '{locationId}'
          method: post
  updateChannel:
    handler: box.updateChannel
    events:
      - http:
          path: '{locationId}'
          method: put
  get:
    handler: box.get
    events:
      - http:
          path: '{locationId}/{boxId}'
          method: get
  getAll:
    handler: box.getAll
    events:
      - http:
          path: '{locationId}'
          method: get
