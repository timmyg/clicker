service: widget-service

provider:
  name: aws
  runtime: nodejs8.10
  environment:
    tableName: ${self:custom.tableName}
    serviceName: ${self:service}
  stage: ${self:custom.stage}
  region: us-east-1

# plugins:
#   - serverless-domain-manager

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-widgets
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # customDomain:
  #   domainName: 'api.tryclicker.com' # Change this to your domain.
  #   basePath: 'widgets' # This will be prefixed to all routes
  #   stage: ${self:provider.stage}
  #   createRoute53Record: true

resources:
  - Resources:
    WidgetsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: losantId
            AttributeType: S
        KeySchema:
          - AttributeName: losantId
            KeyType: HASH
        # Set the capacity based on the stage
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}

functions:
  health:
    handler: api/widget.health
    events:
      - http:
          path: widget/health
          method: get
          cors: true
  create:
    handler: api/widget.create
    events:
      - http:
          path: widget
          method: post
          cors: true
  list:
    handler: api/widget.list
    events:
      - http:
          path: widget
          method: get
          cors: true
  getIp:
    handler: api/widget.getIp
    events:
      - http:
          path: widget/{losantId}/ip
          method: get
          cors: true
          request:
            parameters:
              paths:
                losantId: true
  get:
    handler: api/widget.get
    events:
      - http:
          path: widget/{losantId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                losantId: true
  update:
    handler: api/widget.update
    events:
      - http:
          path: widget/{losantId}
          method: put
          cors: true
          request:
            parameters:
              paths:
                losantId: true
  delete:
    handler: api/widget.delete
    events:
      - http:
          path: widget/{losantId}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                losantId: true
