service: programs
frameworkVersion: '>=1.1.0 <2.0.0'
provider:
  name: aws
  runtime: nodejs8.10
  environment:
    stage: ${self:custom.stage}
    tableProgram: ${self:custom.tableProgram}
    tableProgrammingArea: ${self:custom.tableProgrammingArea}
    serviceName: ${self:service}
    segmentWriteKey: ${self:custom.segmentKey.${self:custom.stage}}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:*
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: '*'

plugins:
  - serverless-domain-manager

custom:
  stage: ${opt:stage, self:provider.stage}
  tableProgram: programs-${self:custom.stage}
  # tableProgrammingArea: programming-area-${self:custom.stage}
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  domains:
    prod: api.tryclicker.com
    release: api-release.tryclicker.com
    develop: api-develop.tryclicker.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: programs
    certificateName: 'api.tryclicker.com'
    stage: ${self:custom.stage}
    createRoute53Record: true
    endpointType: 'edge'
  segmentKey:
    prod: ${env:SEGMENT_WRITE_KEY}
    release: ${env:SEGMENT_WRITE_KEY_DEV}
    develop: ${env:SEGMENT_WRITE_KEY_DEV}
resources:
  Resources:
    ProgramTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.tableProgram}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}
    # ProgammingAreaTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   Properties:
    #     TableName: ${self:custom.tableProgrammingArea}
    #     AttributeDefinitions:
    #       - AttributeName: id
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: id
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: ${self:custom.tableThroughput}
    #       WriteCapacityUnits: ${self:custom.tableThroughput}

functions:
  health:
    handler: program.health
    events:
      - http:
          path: health
          method: get
          cors: true
  getAll:
    handler: program.getAll
    events:
      - http:
          path: ''
          method: get
          cors: true
  syncNew:
    handler: program.syncNew
    events:
      - http:
          path: new
          method: post
          cors: true
      - schedule: rate(2 hours)
  syncDescriptions:
    handler: program.syncDescriptions
    # timeout: 10
    events:
      - http:
          path: descriptions
          method: post
          cors: true
      - schedule: rate(1 minute)
  createAreaProgramming:
    handler: program.createAreaProgramming
    events:
      - http:
          path: 'area/{areaId}'
          method: post
          cors: true
  getAreaProgramming:
    handler: program.getAreaProgramming
    events:
      - http:
          path: 'area/{areaId}'
          method: get
          cors: true
