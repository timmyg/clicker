service: programs
frameworkVersion: '>=1.1.0 <2.0.0'
provider:
  name: aws
  memorySize: 128
  versionFunctions: false
  runtime: nodejs10.x
  deploymentBucket:
    name: serverless-deploys-clicker
  environment:
    stage: ${self:custom.stage}
    tableProgram: ${self:custom.tableProgram}
    tableProgramArea: ${self:custom.tableProgramArea}
    serviceName: ${self:service}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:*
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: '*'

plugins:
  - serverless-domain-manager
  - serverless-prune-plugin
  - serverless-sentry
  - serverless-dotenv-plugin

custom:
  stage: ${opt:stage, self:provider.stage}
  prune:
    automatic: true
    number: 3
  tableProgram: programs-${self:custom.stage}
  tableProgramArea: programs-area-${self:custom.stage}
  tableThroughputs:
    prod: 2
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  domains:
    prod: api.tryclicker.com
    release: api-release.tryclicker.com
    develop: api-develop.tryclicker.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: programs
    certificateName: 'api.tryclicker.com'
    stage: ${self:custom.stage}
    createRoute53Record: true
    endpointType: 'edge'
  sentry:
    dsn: ${env:SENTRY_DSN_ENDPOINT}
  dotenv:
    basePath: ../
  # newProgramTopic: '${self:service}-${self:provider.stage}-sns-new-program'
  # newProgramTopicArn:
  #   # local:
  #   #   "arn:aws:sns:us-east-1:123456789012:${self:custom.newProgramTopic}"
  #   deployed:
  #     {
  #       'Fn::Join':
  #         [
  #           '',
  #           ['arn:aws:sns:${self:provider.region}:', { 'Ref': 'AWS::AccountId' }, ':${self:custom.newProgramTopic}'],
  #         ],
  #     }
resources:
  Resources:
    newProgramTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-new-program-topic
    newProgramQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-new-program-queue
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt
            - newProgramDLQ
            - Arn
          maxReceiveCount: 3
    newProgramDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-new-program-queue-dlq
    snsToNewProgramQueueSqsPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: 'allow-sns-messages'
              Effect: Allow
              Principal: '*'
              Resource: !GetAtt
                - newProgramQueue
                - Arn
              Action: 'SQS:SendMessage'
              Condition:
                ArnEquals:
                  'aws:SourceArn': !Ref newProgramTopic
        Queues:
          - Ref: newProgramQueue
    newProgramQueueSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: !Ref newProgramTopic
        Endpoint: !GetAtt
          - newProgramQueue
          - Arn
        Protocol: sqs
        RawMessageDelivery: 'true'
    ProgramTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.tableProgram}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: start
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: start
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}
    ProgramAreaTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.tableProgramArea}
        AttributeDefinitions:
          - AttributeName: zip
            AttributeType: S
        KeySchema:
          - AttributeName: zip
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}
functions:
  health:
    handler: program.health
    events:
      - http:
          path: health
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  getAll:
    handler: program.getAll
    memorySize: 1024
    timeout: 20
    events:
      - http:
          path: 'location/{locationId}'
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  getProgramAreas:
    handler: program.getProgramAreas
    events:
      - http:
          path: 'areas'
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  syncNew:
    handler: program.syncNew
    memorySize: 1024
    timeout: 20
    # environment:
    #   # newProgramTopicArn: ${self:custom.newProgramTopicArn.${self:provider.stage}}
    #   newProgramTopicArn: ${self:custom.newProgramTopicArn.deployed}
    events:
      - http:
          path: 'sync'
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
      - schedule: rate(30 minutes)
  createArea:
    handler: program.createArea
    events:
      - http:
          path: 'area'
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  consumeNewProgram:
    handler: program.consumeNewProgram
    description: Consume new program queue and add description
    reservedConcurrency: 5
    events:
      - sqs:
          arn: !GetAtt
            - newProgramQueue
            - Arn
          batchSize: 1
    # events:
    # - sns: ${self:custom.newProgramTopic}
  # consumeNewProgramFunction:
  #   handler: program.consumeNewProgramFunction
  #   events:
  #     - http:
  #         path: 'area'
  #         method: post
  #         cors:
  #           origin: '*'
  #           headers:
  #             - partner
  #             - authorization
  #             - content-type
