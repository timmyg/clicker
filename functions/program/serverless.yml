service: program
frameworkVersion: '>=1.1.0 <2.0.0'
provider:
  name: aws
  memorySize: 1024
  versionFunctions: false
  # tracing: true
  runtime: nodejs12.x
  logRetentionInDays: 14
  deploymentBucket:
    name: serverless-deploys-clicker
  environment:
    stage: ${self:custom.stage}
    tableProgram: ${self:custom.tableProgram}
    serviceName: ${self:service}
    airtableKey: ${env:AIRTABLE_KEY}
    airtableBase: ${self:custom.airtableBase.${self:custom.stage}}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:*
        - lambda:InvokeFunction
        - lambda:InvokeAsync
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: '*'
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
        {
          'Fn::Join':
            [
              '',
              ['arn:aws:sns:${self:provider.region}:', { 'Ref': 'AWS::AccountId' }, ':${self:custom.newProgramTopic}'],
            ],
        }
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
        {
          'Fn::Join':
            [
              '',
              [
                'arn:aws:sns:${self:provider.region}:',
                { 'Ref': 'AWS::AccountId' },
                ':${self:custom.newProgramAirtableTopic}',
              ],
            ],
        }

plugins:
  - serverless-domain-manager
  - serverless-prune-plugin
  - serverless-sentry
  - serverless-dotenv-plugin
  - serverless-plugin-tracing
  - serverless-bundle
custom:
  stage: ${opt:stage, self:provider.stage}
  prune:
    automatic: true
    number: 3
  bundle:
    sourcemaps: false
    linting: false
  tableProgram: programs-${self:custom.stage}
  domains:
    prod: api.tryclicker.com
    release: api-release.tryclicker.com
    develop: api-develop.tryclicker.com
  airtableBase:
    prod: ${env:AIRTABLE_BASE}
    release: ${env:AIRTABLE_BASE_RELEASE}
    develop: ${env:AIRTABLE_BASE_DEV}
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: programs
    certificateName: 'api.tryclicker.com'
    stage: ${self:custom.stage}
    createRoute53Record: true
    endpointType: 'edge'
  sentry:
    dsn: ${env:SENTRY_DSN_ENDPOINT}
  dotenv:
    basePath: ../
  newProgramTopic: ${self:service}-${self:custom.stage}-new-program-topic
  newProgramTopicArn:
    deployed:
      {
        'Fn::Join':
          [
            '',
            ['arn:aws:sns:${self:provider.region}:', { 'Ref': 'AWS::AccountId' }, ':${self:custom.newProgramTopic}'],
          ],
      }
  newProgramAirtableTopic: ${self:service}-${self:custom.stage}-new-program-airtable-topic
  newProgramAirtableTopicArn:
    deployed:
      {
        'Fn::Join':
          [
            '',
            [
              'arn:aws:sns:${self:provider.region}:',
              { 'Ref': 'AWS::AccountId' },
              ':${self:custom.newProgramAirtableTopic}',
            ],
          ],
      }
resources:
  Resources:
    newProgramTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:custom.stage}-new-program-topic
        # TopicName: ${self:custom.newProgramTopic}
    newProgramQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:custom.stage}-new-program-queue
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt
            - newProgramDLQ
            - Arn
          maxReceiveCount: 3
    newProgramDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:custom.stage}-new-program-queue-dlq
    snsToNewProgramQueueSqsPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: 'allow-sns-messages'
              Effect: Allow
              Principal: '*'
              Resource: !GetAtt
                - newProgramQueue
                - Arn
              Action: 'SQS:SendMessage'
              Condition:
                ArnEquals:
                  'aws:SourceArn': !Ref newProgramTopic
        Queues:
          - Ref: newProgramQueue
    newProgramQueueSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: !Ref newProgramTopic
        Endpoint: !GetAtt
          - newProgramQueue
          - Arn
        Protocol: sqs
        RawMessageDelivery: 'true'
    newProgramAirtableTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:custom.stage}-new-program-airtable-topic
        # TopicName: ${self:custom.newProgramAirtableTopic}
    newProgramAirtableQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:custom.stage}-new-program-airtable-queue
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt
            - newProgramAirtableDLQ
            - Arn
          maxReceiveCount: 3
    newProgramAirtableDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:custom.stage}-new-program-airtable-queue-dlq
    snsToNewProgramAirtableQueueSqsPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: 'allow-sns-messages'
              Effect: Allow
              Principal: '*'
              Resource: !GetAtt
                - newProgramAirtableQueue
                - Arn
              Action: 'SQS:SendMessage'
              Condition:
                ArnEquals:
                  'aws:SourceArn': !Ref newProgramAirtableTopic
        Queues:
          - Ref: newProgramAirtableQueue
    newProgramAirtableQueueSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: !Ref newProgramAirtableTopic
        Endpoint: !GetAtt
          - newProgramAirtableQueue
          - Arn
        Protocol: sqs
        RawMessageDelivery: 'true'
functions:
  health:
    handler: program.health
    events:
      - http:
          path: health
          method: get
  getAll:
    handler: program.getAll
    # provisionedConcurrency: 1
    timeout: 20
    events:
      - http:
          path: location/{locationId}
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - app
              - clicker
              - authorization
              - content-type
  syncRegions:
    handler: program.syncRegions
    description: pull in directv data from their api into programs table for all regions
    # timeout: 60
    events:
      - schedule: rate(2 hours)
      - schedule: cron(58 8 * * ? *) # every day @ 3:58/4:58am eastern
      - http:
          path: sync
          method: post
  syncRegionNextFewHours:
    handler: program.syncRegionNextFewHours
    timeout: 30
    environment:
      # newProgramTopicArn: ${self:custom.newProgramTopicArn.${self:provider.stage}}
      newProgramTopicArn: ${self:custom.newProgramTopicArn.deployed}
  syncAirtable:
    handler: program.syncAirtable
    description: call syncAirtableRegion for each region
    timeout: 12
    events:
      - schedule: cron(59 8 * * ? *) # every day @ 3:59/4:59am eastern
      - http:
          path: sync/airtable
          method: post
  syncAirtableRegion:
    handler: program.syncAirtableRegion
    description: sync programs in DTV api to airtable for region
    timeout: 120
    reservedConcurrency: 1
    environment:
      newProgramAirtableTopicArn: ${self:custom.newProgramAirtableTopicArn.deployed}
  syncAirtableUpdates:
    handler: program.syncAirtableUpdates
    description: sync user program game id/rating/early from airtable to programs db
    timeout: 15
    events:
      - schedule: cron(9/10 * * * ? *) # every minute ending in 9
      - http:
          path: sync/airtable/updates
          method: post
  consumeNewProgramUpdateDetails:
    timeout: 30
    handler: program.consumeNewProgramUpdateDetails
    description: Consume new db program and update description
    reservedConcurrency: 1
    events:
      - sqs:
          arn: !GetAtt
            - newProgramQueue
            - Arn
          batchSize: 1
  consumeNewProgramAirtableUpdateDetails:
    timeout: 30
    handler: program.consumeNewProgramAirtableUpdateDetails
    description: Consume new airtable program update description
    reservedConcurrency: 1
    events:
      - sqs:
          arn: !GetAtt
            - newProgramAirtableQueue
            - Arn
          batchSize: 1
  # evaluateUserAgents:
  #   handler: programDirectv.evaluateUserAgents
  #   timeout: 600
  #   events:
  #     - http:
  #         path: 'dtv/evaluate'
  #         method: get
  get:
    handler: program.get
    timeout: 30
    events:
      - http:
          path: ''
          method: get
  regions:
    handler: program.regions
    events:
      - http:
          path: regions
          method: get
  upcoming:
    handler: program.upcoming
    # reservedConcurrency: 1
    events:
      - http:
          path: '{locationId}/upcoming'
          method: get
  clearDatabase:
    handler: program.clearDatabase
    description: clear out programs database table
    timeout: 120
    events:
      - schedule: cron(57 8 * * ? *) # every day @ 3:57/4:57am eastern
      - http:
          path: clear/database
          method: post
  clearAirtable:
    handler: program.clearAirtable
    description: clear out games and control center airtables
    timeout: 120
    events:
      - schedule: cron(57 8 * * ? *) # every day @ 3:57/4:57am eastern
      - http:
          path: clear/airtable
          method: post
