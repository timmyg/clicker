service: programs
frameworkVersion: '>=1.1.0 <2.0.0'
provider:
  name: aws
  versionFunctions: false
  runtime: nodejs8.10
  deploymentBucket:
    name: serverless-deploys-clicker
  environment:
    stage: ${self:custom.stage}
    tableProgram: ${self:custom.tableProgram}
    tableProgramArea: ${self:custom.tableProgramArea}
    serviceName: ${self:service}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:*
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: '*'

plugins:
  - serverless-domain-manager
  - serverless-prune-plugin
  - serverless-sentry

custom:
  stage: ${opt:stage, self:provider.stage}
  prune:
    automatic: true
    number: 3
  tableProgram: programs-${self:custom.stage}
  tableProgramArea: programs-area-${self:custom.stage}
  tableThroughputs:
    prod: 2
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  domains:
    prod: api.tryclicker.com
    release: api-release.tryclicker.com
    develop: api-develop.tryclicker.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: programs
    certificateName: 'api.tryclicker.com'
    stage: ${self:custom.stage}
    createRoute53Record: true
    endpointType: 'edge'
  sentry:
    dsn: ${env:SENTRY_DSN_ENDPOINT}
resources:
  Resources:
    ProgramTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.tableProgram}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}
    ProgramAreaTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.tableProgramArea}
        AttributeDefinitions:
          - AttributeName: zip
            AttributeType: N
        KeySchema:
          - AttributeName: zip
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}
functions:
  health:
    handler: program.health
    events:
      - http:
          path: health
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  getAll:
    handler: program.getAll
    events:
      - http:
          path: 'location/{locationId}'
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  getProgramAreas:
    handler: program.getProgramAreas
    events:
      - http:
          path: 'areas'
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  syncNew:
    handler: program.syncNew
    timeout: 20
    events:
      - http:
          path: 'sync'
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
      - schedule: rate(30 minutes)
  syncDescriptions:
    handler: program.syncDescriptions
    # timeout: 10
    events:
      - http:
          path: 'sync/descriptions'
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
      - schedule: rate(3 minutes)
  createArea:
    handler: program.createArea
    events:
      - http:
          path: 'area'
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
