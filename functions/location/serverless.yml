service: location
frameworkVersion: '>=1.1.0 <2.0.0'
provider:
  name: aws
  memorySize: 128
  versionFunctions: false
  runtime: nodejs10.x
  deploymentBucket:
    name: serverless-deploys-clicker
  environment:
    stage: ${self:custom.stage}
    tableLocation: ${self:custom.tableLocation}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:*
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: '*'
plugins:
  - serverless-domain-manager
  - serverless-prune-plugin
  - serverless-sentry
  # - serverless-dotenv-plugin

custom:
  stage: ${opt:stage}
  prune:
    automatic: true
    number: 3
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  domains:
    prod: api.tryclicker.com
    release: api-release.tryclicker.com
    develop: api-develop.tryclicker.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: locations
    certificateName: 'api.tryclicker.com'
    stage: ${self:custom.stage}
    createRoute53Record: true
    endpointType: 'edge'
  sentry:
    dsn: ${env:SENTRY_DSN_ENDPOINT}
  # dotenv:
  #   basePath: ../
  tableLocation: locations-${self:custom.stage}
resources:
  Resources:
    LocationsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.tableLocation}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: losantId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}
        # GlobalSecondaryIndexes:
        #   - IndexName: losantIdGlobalIndex
        #     KeySchema:
        #       - AttributeName: losantId
        #         KeyType: HASH
        #     Projection:
        #       ProjectionType: KEYS_ONLY
        #     ProvisionedThroughput:
        #       ReadCapacityUnits: ${self:custom.tableThroughput}
        #       WriteCapacityUnits: ${self:custom.tableThroughput}

functions:
  health:
    handler: location.health
    events:
      - http:
          path: health
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  all:
    handler: location.all
    events:
      - http:
          path: ''
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  allByGeolocation:
    handler: location.all
    events:
      - http:
          path: '/geo/{latitude}/{longitude}'
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  get:
    handler: location.get
    events:
      - http:
          path: '{id}'
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  create:
    handler: location.create
    events:
      - http:
          path: ''
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  connected:
    handler: location.connected
    events:
      - http:
          path: 'device/{losantId}/connected'
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  disconnected:
    handler: location.disconnected
    events:
      - http:
          path: 'device/{losantId}/disconnected'
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  update:
    handler: location.update
    events:
      - http:
          path: '{id}'
          method: put
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  setBoxes:
    handler: location.setBoxes
    events:
      - http:
          path: '{id}/boxes'
          method: put
          cors:
            origin: '*'
            # headers:
            #   - partner
            #   - authorization
  setLabels:
    handler: location.setLabels
    events:
      - http:
          path: '{id}/boxes/labels'
          method: put
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  identifyBoxes:
    handler: location.identifyBoxes
    events:
      - http:
          path: '{id}/boxes/identify'
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  saveBoxesInfo:
    handler: location.saveBoxesInfo
    events:
      - http:
          path: '{id}/boxes/info'
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  setBoxReserved:
    handler: location.setBoxReserved
    events:
      - http:
          path: '{id}/boxes/{boxId}/reserved'
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  setBoxFree:
    handler: location.setBoxFree
    events:
      - http:
          path: '{id}/boxes/{boxId}/free'
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  updateBoxChannel:
    handler: location.updateBoxChannel
  allOff:
    handler: location.allOff
    events:
      - http:
          path: '{id}/boxes/off'
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  allOn:
    handler: location.allOn
    events:
      - http:
          path: '{id}/boxes/on'
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  checkAllBoxesInfo:
    handler: location.checkAllBoxesInfo
    timeout: 30
    events:
      - schedule: rate(5 minutes)
      - http:
          path: boxes/info
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
  controlCenterLocationsByRegion:
    handler: location.controlCenterLocationsByRegion
    events:
      - http:
          path: 'regions/{regions}'
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - authorization
              - content-type
