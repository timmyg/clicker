service: location
frameworkVersion: '>=1.1.0 <2.0.0'
provider:
  name: aws
  memorySize: 128
  versionFunctions: false
  runtime: nodejs12.x
  # tracing: true
  logRetentionInDays: 14
  deploymentBucket:
    name: serverless-deploys-clicker
  environment:
    stage: ${self:custom.stage}
    tableLocation: ${self:custom.tableLocation}
    airtableKey: ${env:AIRTABLE_KEY}
    airtableBase: ${self:custom.airtableBase.${self:custom.stage}}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:*
        - lambda:InvokeFunction
        - lambda:InvokeAsync
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: '*'
plugins:
  - serverless-domain-manager
  - serverless-prune-plugin
  - serverless-sentry
  - serverless-dotenv-plugin
  - serverless-plugin-tracing
  - serverless-plugin-scripts

custom:
  stage: ${opt:stage}
  # hooks:
  #   after:deploy:finalize:
  #     - npx sls invoke -f migration
  scripts:
    hooks:
      'deploy:finalize': sls invoke -f migration --stage ${self:custom.stage}
  prune:
    automatic: true
    number: 3
  domains:
    prod: api.tryclicker.com
    release: api-release.tryclicker.com
    develop: api-develop.tryclicker.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: locations
    certificateName: 'api.tryclicker.com'
    stage: ${self:custom.stage}
    createRoute53Record: true
    endpointType: 'edge'
  sentry:
    dsn: ${env:SENTRY_DSN_ENDPOINT}
  dotenv:
    basePath: ../
  tableLocation: locations-${self:custom.stage}
  airtableBase:
    prod: ${env:AIRTABLE_BASE}
    release: ${env:AIRTABLE_BASE_RELEASE}
    develop: ${env:AIRTABLE_BASE_DEV}
  # provisionedConcurrencies:
  #   prod: 1
  #   release: 1
  #   default: 0
  # provisionedConcurrency: ${self:custom.provisionedConcurrencies.${self:custom.stage}, self:custom.provisionedConcurrencies.default}
resources:
  Resources:
    LocationsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableLocation}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: losantId
            AttributeType: S
          - AttributeName: _v
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: losantIdGlobalIndex
            KeySchema:
              - AttributeName: losantId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: _vGlobalIndex
            KeySchema:
              - AttributeName: _v
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
functions:
  health:
    handler: location.health
    events:
      - http:
          path: health
          method: get
  get:
    handler: location.get
    events:
      - http:
          path: '{id}'
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - app
              - clicker
              - authorization
              - content-type
  all:
    handler: location.all
    # provisionedConcurrency: 1
    events:
      - http:
          path: ''
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - app
              - clicker
              - authorization
              - content-type
  allByGeolocation:
    handler: location.all
    # provisionedConcurrency: 2
    # provisionedConcurrency: ${self:custom.provisionedConcurrency}
    events:
      - http:
          path: 'geo/{latitude}/{longitude}'
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - app
              - clicker
              - authorization
              - content-type
  getBox:
    handler: location.getBox
    description: get box info, for informational purposes only
    events:
      - http:
          path: '{id}/boxes/{boxId}'
          method: get
  delete:
    handler: location.delete
    events:
      - http:
          path: '{id}'
          method: delete
  create:
    handler: location.create
    events:
      - http:
          path: ''
          method: post
  connected:
    handler: location.connected
    events:
      - http:
          path: 'device/{losantId}/connected'
          method: post
  disconnected:
    handler: location.disconnected
    events:
      - http:
          path: 'device/{losantId}/disconnected'
          method: post
  update:
    handler: location.update
    events:
      - http:
          path: '{id}'
          method: put
  setBoxes:
    handler: location.setBoxes
    events:
      - http:
          path: '{id}/boxes'
          method: put
  saveBoxesInfo:
    description: called from antenna to update whats on each box
    handler: location.saveBoxesInfo
    timeout: 12
    events:
      - http:
          path: '{id}/boxes/info'
          method: post
  setBoxReserved:
    handler: location.setBoxReserved
    events:
      - http:
          path: '{id}/boxes/{boxId}/reserved'
          method: post
  setBoxFree:
    handler: location.setBoxFree
    events:
      - http:
          path: '{id}/boxes/{boxId}/free'
          method: post
  updateBoxInfo:
    description: called by location.saveBoxesInfo for manual and remote for other changes
    handler: location.updateBoxInfo
    timeout: 12
    memorySize: 512
  checkAllBoxesInfo:
    handler: location.checkAllBoxesInfo
    description: check what is on all locations boxes (to detect manual changes)
    timeout: 30
    events:
      - schedule: cron(8/10 * * * ? *) # Every 8th minute
      - http:
          path: boxes/info
          method: post
  controlCenterLocationsByRegion:
    handler: location.controlCenterLocationsByRegion
    events:
      - http:
          path: 'regions/{regions}'
          method: get
  controlCenter:
    handler: location.controlCenter
    timeout: 30
    # called by job
    events:
      # - schedule: cron(*/10 * * * ? *) # every 10th minute
      - http:
          path: control-center
          method: post
  controlCenterByLocation:
    handler: location.controlCenterByLocation
    events:
      - http:
          path: '{id}/control-center'
          method: post
  updateAirtableNowShowing:
    handler: location.updateAirtableNowShowing
    timeout: 30
    events:
      - schedule: cron(9/10 * * * ? *)
      - http:
          path: airtable/now-showing
          method: post
  syncAirtableLocations:
    handler: location.syncAirtableLocations
    timeout: 10
    events:
      - schedule: cron(00 10 * * ? *) # every day @ 6am eastern
      - http:
          path: airtable/data/locations
          method: post
  syncAirtableRegions:
    handler: location.syncAirtableRegions
    timeout: 10
    events:
      - schedule: cron(00 10 * * ? *) # every day @ 6am eastern
      - http:
          path: airtable/data/regions
          method: post
  updateAllBoxesPrograms:
    handler: location.updateAllBoxesPrograms
    description: update all location boxes current program (for when antenna doesnt actually call)
    timeout: 30
    events:
      # - schedule: cron(0/5 21-4 ? * * *) # Every 5 minutes between 11pm UTC and 4am UTC
      # - schedule: cron(0/15 4-21 ? * * *) # Every 15 minutes between 4am UTC and 9pm UTC
      - schedule: cron(6/10 * * * ? *) # Every 6th minute
      - http:
          path: boxes/programs
          method: post
  getLocationDetailsPage:
    handler: location.getLocationDetailsPage
    reservedConcurrency: 1
    description: location details rendered html page for app
    timeout: 10
    events:
      - http:
          path: '{id}/details/page'
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - app
              - clicker
              - authorization
              - content-type
  migration:
    handler: location.migration
    description: database migration scripts
    timeout: 90
  syncLocationsBoxes:
    handler: location.syncLocationsBoxes
    events:
      - schedule: cron(00 11 * * ? *) # every day @ 7:00am eastern
      - http:
          path: boxes/sync
          method: post
  slackSlashChangeChannel:
    handler: location.slackSlashChangeChannel
    description: change channel from slack slash command
    events:
      - http:
          path: slack/zap
          method: post
