service: location
frameworkVersion: '>=1.1.0 <2.0.0'
provider:
  name: aws
  runtime: nodejs8.10
  environment:
    stage: ${self:custom.stage}
    tableLocation: ${self:custom.tableLocation}
    segmentWriteKey: ${self:custom.segmentKey.${self:custom.stage}}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:*
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: '*'

plugins:
  - serverless-domain-manager

custom:
  stage: ${opt:stage}
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  domains:
    prod: api.tryclicker.com
    release: api-release.tryclicker.com
    develop: api-develop.tryclicker.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: locations
    certificateName: 'api.tryclicker.com'
    stage: ${self:custom.stage}
    createRoute53Record: true
    endpointType: 'edge'
  tableLocation: locations-${self:custom.stage}
  segmentKey:
    prod: ${env:SEGMENT_WRITE_KEY}
    release: ${env:SEGMENT_WRITE_KEY_DEV}
    develop: ${env:SEGMENT_WRITE_KEY_DEV}
resources:
  Resources:
    LocationsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.tableLocation}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}

functions:
  health:
    handler: location.health
    events:
      - http:
          path: health
          method: get
          cors: true
  all:
    handler: location.all
    events:
      - http:
          path: ''
          method: get
          cors: true
  get:
    handler: location.get
    events:
      - http:
          path: '{id}'
          method: get
          cors: true
  create:
    handler: location.create
    events:
      - http:
          path: ''
          method: post
          cors: true
  update:
    handler: location.update
    events:
      - http:
          path: '{id}'
          method: put
          cors: true
  setBoxes:
    handler: location.setBoxes
    events:
      - http:
          path: '{id}/boxes'
          method: put
          cors: true
  setLabels:
    handler: location.setLabels
    events:
      - http:
          path: '{id}/boxes/labels'
          method: put
          cors: true
  identifyBoxes:
    handler: location.identifyBoxes
    events:
      - http:
          path: '{id}/boxes/identify'
          method: post
          cors: true
  setBoxReserved:
    handler: location.setBoxReserved
    events:
      - http:
          path: '{id}/boxes/{boxId}/reserved'
          method: post
          cors: true
  setBoxFree:
    handler: location.setBoxFree
    events:
      - http:
          path: '{id}/boxes/{boxId}/free'
          method: post
          cors: true
