service: user
frameworkVersion: '>=1.1.0 <2.0.0'
provider:
  name: aws
  runtime: nodejs8.10
  environment:
    tableWallet: ${self:custom.tableWallet}
    segmentWriteKey: ${self:custom.segmentKey.${self:provider.stage}}
    stage: ${self:custom.stage}
    stripeSecretKey: ${self:custom.stripeSecretKey.${self:provider.stage}}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:*
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: '*'

plugins:
  - serverless-domain-manager

custom:
  stage: ${opt:stage, self:provider.stage}
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  domains:
    prod: api.tryclicker.com
    release: api-release.tryclicker.com
    dev: api-dev.tryclicker.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: users
    certificateName: 'api.tryclicker.com'
    stage: ${self:custom.stage}
    createRoute53Record: true
    endpointType: 'edge'
  tableWallet: wallets-${self:custom.stage}
  stripeSecretKey:
    prod: ${env:STRIPE_SECRET_KEY}
    release: ${env:STRIPE_SECRET_KEY_DEV}
    dev: ${env:STRIPE_SECRET_KEY_DEV}
  segmentKey:
    prod: ${env:SEGMENT_WRITE_KEY}
    release: ${env:SEGMENT_WRITE_KEY_DEV}
    dev: ${env:SEGMENT_WRITE_KEY_DEV}
resources:
  Resources:
    Walletable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.tableWallet}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          # - AttributeName: id
          #   AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          # - AttributeName: id
          #   KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}
    # UsersTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   Properties:
    #     TableName: ${self:custom.tableUser}
    #     AttributeDefinitions:
    #       - AttributeName: id
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: id
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: ${self:custom.tableThroughput}
    #       WriteCapacityUnits: ${self:custom.tableThroughput}

functions:
  health:
    handler: user.health
    events:
      - http:
          path: health
          method: get
          cors: true
  create:
    handler: user.create
    events:
      - http:
          path: ''
          method: post
          cors: true
  wallet:
    handler: user.wallet
    events:
      - http:
          path: wallet
          method: get
          cors: true
  updateCard:
    handler: user.updateCard
    events:
      - http:
          path: stripe/card
          method: post
          cors: true
  getStripeCustomer:
    handler: user.getStripeCustomer
    events:
      - http:
          path: stripe/customer
          method: get
          cors: true
  replenish:
    handler: user.replenish
    events:
      - http:
          path: 'tokens'
          method: post
          cors: true
  transaction:
    handler: user.transaction
    events:
      - http:
          path: 'transaction'
          method: post
          cors: true
  alias:
    handler: user.alias
    events:
      - http:
          path: 'alias/{fromId}/{toId}'
          method: post
          cors: true
