schema {
  query: Query
  mutation: Mutation
}

scalar Long

type Query {
  box(id: ID!, locationId: String!): Box
  boxes(locationId: String!, fetchProgram: Boolean = false): [Box]
}

type Mutation {
  addBox(
    id: ID!
    locationId: String!
    region: String!
    info: BoxInfoInput!
    zone: String
    label: String
    configuration: BoxConfigurationInput!
    live: BoxLiveInput!
  ): Box!
  updateBoxLive(id: ID!, locationId: String!, live: BoxLiveInput!): Box!
  deleteBox(id: ID!, locationId: String!): Box
}

input BoxInfoInput {
  ip: String!
  clientAddress: String!
  locationName: String
  notes: String
}

input BoxConfigurationInput {
  appActive: Boolean
  automationActive: Boolean
}

input BoxLiveInput {
  channel: Int
  channelMinor: Int
  channelChangeAt: AWSTimestamp
  channelChangeSource: String
  updatedAt: AWSTimestamp
  lockedProgrammingIds: [String]
  lockedUntil: AWSTimestamp
  region: String
}

type BoxLive {
  channel: Int!
  channelMinor: Int
  channelChangeAt: AWSTimestamp
  channelChangeSource: String!
  program: Program
  lockedProgrammingIds: [String]
  locked: Boolean
  lockedUntil: AWSTimestamp
  updatedAt: AWSTimestamp
  region: String
}

type BoxInfo {
  ip: String!
  clientAddress: String!
  locationName: String
  notes: String
}

type BoxConfiguration {
  appActive: Boolean!
  automationActive: Boolean!
}

type Box {
  id: ID!
  locationId: String!
  region: String!
  label: String
  zone: String
  configuration: BoxConfiguration!
  info: BoxInfo!
  live: BoxLive!
  updatedAt: AWSTimestamp
  createdAt: AWSTimestamp
}
