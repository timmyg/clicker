service: reservation
frameworkVersion: '>=1.1.0 <2.0.0'
provider:
  name: aws
  memorySize: 128
  versionFunctions: false
  runtime: nodejs10.x
  # tracing: true
  logRetentionInDays: 14
  deploymentBucket:
    name: serverless-deploys-clicker
  environment:
    stage: ${self:custom.stage}
    tableReservation: ${self:custom.tableReservation}
    tableThroughputs: ${self:custom.tableThroughputs.${self:custom.stage}}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:*
        - lambda:InvokeFunction
        - lambda:InvokeAsync
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: '*'

plugins:
  - serverless-domain-manager
  - serverless-prune-plugin
  - serverless-sentry
  - serverless-dotenv-plugin
  - serverless-plugin-tracing

custom:
  stage: ${opt:stage, self:provider.stage}
  prune:
    automatic: true
    number: 3
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  domains:
    prod: api.tryclicker.com
    release: api-release.tryclicker.com
    develop: api-develop.tryclicker.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: reservations
    certificateName: 'api.tryclicker.com'
    stage: ${self:custom.stage}
    createRoute53Record: true
    endpointType: 'edge'
  sentry:
    dsn: ${env:SENTRY_DSN_ENDPOINT}
  dotenv:
    basePath: ../
  tableReservation: reservations-${self:custom.stage}
resources:
  Resources:
    ReservationTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableReservation}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        # GlobalSecondaryIndexes:
        #   - IndexName: StartTimeByLocationIndex
        #     KeySchema:
        #       - AttributeName: category
        #         KeyType: HASH
        #     Projection:
        #       ProjectionType: KEYS_ONLY
        #     ProvisionedThroughput:
        #       ReadCapacityUnits: 1
        #       WriteCapacityUnits: 1
        # ProvisionedThroughput:
        #   ReadCapacityUnits: ${self:custom.tableThroughput}
        #   WriteCapacityUnits: ${self:custom.tableThroughput}

functions:
  health:
    handler: reservation.health
    events:
      - http:
          path: health
          method: get
  activeByUser:
    handler: reservation.activeByUser
    events:
      - http:
          path: active/user
          method: get
          cors:
            origin: '*'
            headers:
              - partner
              - app
              - clicker
              - authorization
              - content-type
  get:
    handler: reservation.get
    events:
      - http:
          path: {id}
          method: get
  create:
    handler: reservation.create
    timeout: 20
    events:
      - http:
          path: ''
          method: post
          cors:
            origin: '*'
            headers:
              - partner
              - app
              - clicker
              - authorization
              - content-type
  cancel:
    handler: reservation.cancel
    events:
      - http:
          path: {id}
          method: delete
          cors:
            origin: '*'
            headers:
              - partner
              - app
              - clicker
              - authorization
              - content-type
  update:
    handler: reservation.update
    timeout: 20
    events:
      - http:
          path: path: {id}
          method: put
          cors:
            origin: '*'
            headers:
              - partner
              - app
              - clicker
              - authorization
              - content-type
