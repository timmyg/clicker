service: receiver
frameworkVersion: '>=1.1.0 <2.0.0'
provider:
  name: aws
  runtime: nodejs8.10
  environment:
    stage: ${self:custom.stage}
    tableReceiver: ${self:custom.tableReceiver}
    tableBox: ${self:custom.tableBox}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:*
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: '*'
plugins:
  - serverless-domain-manager

custom:
  stage: ${opt:stage, self:provider.stage}
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  domains:
    prod: api.tryclicker.com
    release: api-release.tryclicker.com
    dev: api-dev.tryclicker.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: receivers
    certificateName: 'api.tryclicker.com'
    stage: ${self:custom.stage}
    createRoute53Record: true
    endpointType: 'edge'
  tableReceiver: receivers-${self:custom.stage}
  tableBox: boxes-${self:custom.stage}
resources:
  Resources:
    ReceiversTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.tableReceiver}
        AttributeDefinitions:
          - AttributeName: widgetId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: widgetId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}
    BoxesTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.tableBox}
        AttributeDefinitions:
          - AttributeName: receiverId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: receiverId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}

functions:
  health:
    handler: receiver.health
    events:
      - http:
          path: health
          method: get
          cors: true
  getBoxes:
    handler: receiver.getBoxes
    events:
      - http:
          path: '{id}/boxes'
          method: get
          cors: true
  upsert:
    handler: receiver.upsert
    events:
      - http:
          path: '{id}'
          method: put
          cors: true
  setIp:
    handler: receiver.setIp
    events:
      - http:
          path: '{id}/ip'
          method: put
          cors: true
  setBoxes:
    handler: receiver.setBoxes
    events:
      - http:
          path: '{id}/boxes'
          method: put
          cors: true
  setTags:
    handler: receiver.setTags
    events:
      - http:
          path: '{id}/boxes/tags'
          method: put
          cors: true
  identify:
    handler: receiver.identify
    events:
      - http:
          path: '{id}/identify'
          method: post
          cors: true
