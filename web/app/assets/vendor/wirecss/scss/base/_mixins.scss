// ----------------------
//
// MIXINS
//
// ----------------------
// ----------------------
// Media Queries
// Use predefined breakpoints defined in $wire-breakpoints or use custom value
// mq(phone)
// mq(phone, landscape)
// mq(820px)
// mq(768px, 1024px, landscape)
// ----------------------
@mixin mq($min, $max: false, $orientation: false) {
  @if map-has-key($wire-breakpoints, $min) {
    @if not $orientation {
      @media #{map-get($wire-breakpoints, $min)} {
        @content;
      }
    } @else {
      @if map-has-key($wire-breakpoints, $min) {
        @media #{map-get($wire-breakpoints, $min)} and (orientation : $orientation) {
          @content;
        }
      }
    }
  } @else {
    @if not $max {
      @media (max-width: #{$min}) {
        @content;
      }
    } @else {
      @if not $orientation {
        @media (min-width: #{$min}) and (max-width: #{$max}) {
          @content;
        }
      } @else {
        @media (min-width: #{$min}) and (max-width: #{$max}) and (orientation: #{$orientation}) {
          @content;
        }
      }
    }
  }
}

// ----------------------
// FontFace
// fontface(name, filename, weight, style, stretch)
// ----------------------
@function font-url($path) {
  @return url('fonts/' + $path);
}

@mixin font-face($font-family, $font-filename, $font-weight : normal, $font-style :normal, $font-stretch : normal) {
  @font-face {
      font-family: '#{$font-family}';
      src: font-url('#{$font-filename}.eot');
      src: font-url('#{$font-filename}.eot?#iefix') format('embedded-opentype'),
      font-url('#{$font-filename}.woff') format('woff'),
      font-url('#{$font-filename}.ttf') format('truetype'),
      font-url('#{$font-filename}.svg##{$font-family}') format('svg');
      font-weight: $font-weight;
      font-style: $font-style;
      font-stretch: $font-stretch;
  }
}
